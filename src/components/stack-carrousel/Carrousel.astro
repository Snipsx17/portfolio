---
import { Image } from 'astro:assets';

interface Props {
  images: image[];
}

const { images } = Astro.props;
---

<div class="scroller" data-direction="right" data-speed="slow">
  <div class="scroller__inner">
    {images.map(image => {
      return (
      <div class="flex flex-col content-between ">
        <div class="bg-white rounded-xl shadow-md w-[60px] h-[60px] flex content-center p-2 mb-1">
          <Image class="" src={image.img} alt='' loading='lazy' />
        </div>
        <p class="text-center text-lg">{image.title}</p>
      </div>)
    })}
  </div>
</div>
<style>

.scroller {
  width: 100%;
}

.scroller__inner {
  padding-block: 1rem;
  display: flex;
  flex-wrap: wrap;
  gap: 3rem;
}

.scroller[data-animated="true"] {
  overflow: hidden;
  -webkit-mask: linear-gradient(
    90deg,
    transparent,
    white 20%,
    white 40%,
    transparent
  );
  mask: linear-gradient(90deg, transparent, white 10%, white 90%, transparent);
}

.scroller[data-animated="true"] .scroller__inner {
  width: max-content;
  flex-wrap: nowrap;
  animation: scroll var(--_animation-duration, 40s)
    var(--_animation-direction, forwards) linear infinite;
}

.scroller[data-direction="right"] {
  --_animation-direction: reverse;
}

.scroller[data-direction="left"] {
  --_animation-direction: forwards;
}

.scroller[data-speed="fast"] {
  --_animation-duration: 10s;
}

.scroller[data-speed="slow"] {
  --_animation-duration:30s;
}

@keyframes scroll {
  to {
    transform: translate(calc(-30% - 0.5rem));
  }
}

</style>
<script>
  const scrollers: NodeListOf<Element> = document.querySelectorAll(".scroller");

// Si el usuario no ha elegido movimiento reducido, entonces agregamos la animación
if (!window.matchMedia("(prefers-reduced-motion: reduce)").matches) {
  addAnimation();
}

function addAnimation(): void {
  scrollers.forEach((scroller: Element) => {
    // Agregar data-animated="true" a cada `.scroller` en la página
    scroller.setAttribute("data-animated", "true");

    // Crear un arreglo desde los elementos dentro de `.scroller-inner`
    const scrollerInner: Element | null = scroller.querySelector(".scroller__inner");
    
    if (scrollerInner) {
      const scrollerContent: Element[] = Array.from(scrollerInner.children);

      // Para cada elemento en el arreglo, clonarlo
      // agregar aria-hidden
      // agregarlo en `.scroller-inner`
      scrollerContent.forEach((item: Element) => {
        const duplicatedItem: Element = item.cloneNode(true) as Element;
        duplicatedItem.setAttribute("aria-hidden", "true");
        scrollerInner.appendChild(duplicatedItem);
      });
    }
  });
}
</script>